apiVersion: apps/v1
kind: Deployment
metadata:
  name: test
spec:
  selector:
    matchLabels:
      app: test
  replicas: 1
  template:
    metadata:
      labels:
        app: test
    spec:
      containers:
      - name: test
        image: ubuntu
        command: ["bash", "-c", "echo Hello world!"]
        # args: []
        # livenessProbe:
        #   httpGet:
        #     path: /
        #     port: 80
        #   failureThreshold: 20
        #   initialDelaySeconds: 10
        #   periodSeconds: 10
        volumeMounts:
        - name: test-data
          mountPath: /data
          # readOnly: true
        resources:
          requests:
            cpu: "1500m"
            memory: "1Gi"
          limits:
            cpu: "3000m"
            memory: "4Gi"
        ports:
          - containerPort: 80
      volumes:
      - name: test-data
        persistentVolumeClaim:
          claimName: test-data-claim
      priorityClassName: staging-service
      terminationGracePeriodSeconds: 60 # 1 minute
      # affinity:
      #   podAntiAffinity:
      #     preferredDuringSchedulingIgnoredDuringExecution:
      #     - weight: 1
      #       podAffinityTerm:
      #         labelSelector:
      #           matchExpressions:
      #           - key: app
      #             operator: In
      #             values:
      #             - test
      #         topologyKey: kubernetes.io/hostname
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: test-deployable
      #           operator: In
      #           values:
      #           - "true"
---
apiVersion: v1
kind: Service
metadata:
  name: test-svc
spec:
  type: ClusterIP
  selector:
    app: test
  ports:
    - port: 80
      targetPort: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: test-data-claim
spec:
  accessModes:
  - "ReadWriteMany"
  resources:
    requests:
      storage: 10Gi
